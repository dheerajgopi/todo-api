// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dheerajgopi/todo-api/task (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	models "github.com/dheerajgopi/todo-api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Repository is a mock of Repository interface
type Repository struct {
	ctrl     *gomock.Controller
	recorder *RepositoryMockRecorder
}

// RepositoryMockRecorder is the mock recorder for Repository
type RepositoryMockRecorder struct {
	mock *Repository
}

// NewRepository creates a new mock instance
func NewRepository(ctrl *gomock.Controller) *Repository {
	mock := &Repository{ctrl: ctrl}
	mock.recorder = &RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Repository) EXPECT() *RepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *Repository) Create(arg0 context.Context, arg1 *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *RepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Repository)(nil).Create), arg0, arg1)
}

// GetByID mocks base method
func (m *Repository) GetByID(arg0 context.Context, arg1 int64) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *RepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*Repository)(nil).GetByID), arg0, arg1)
}
